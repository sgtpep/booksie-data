#!/usr/bin/env node
const fs = require('fs')
const { buildBooks, ghostscriptOptions, parsePDFInfo } = require('../source')
const {
  downloadFile,
  executeCommand,
  fetchURL,
  moveFile,
  tempPath,
} = require('..')

const exclusions = [
  '1647', // few illustrations
  '1650', // few illustrations
  '1654', // few illustrations
  '1661', // few illustrations
  '1671', // few illustrations
]

const generateBook = book => {
  const data = JSON.parse(
    fetchURL('https://api.digitallibrary.io/graphql-book-service', [
      '-d',
      `{ "operationName": "book", "variables": { "id": "${book.slug}-en" }, "query": "query book($id: ID!) { book(id: $id) { coverImage { url } downloads { epub } title } }" }`,
    ]),
  ).data.book
  return {
    cover: `${data.coverImage.url.replace(
      /\/(dwqxoowxi)\/.+?\/.+?\//,
      '/$1/w_768/',
    )}.jpg`,
    document: data.downloads.epub,
    processDocument,
    title: data.title,
  }
}

const generateBooks = () => ids.map(id => ({ slug: id }))

const ids = [
  1347,
  1348,
  1349,
  1350,
  1351,
  1352,
  1353,
  1354,
  1355,
  1357,
  1358,
  1359,
  1360,
  1361,
  1362,
  1363,
  1364,
  1365,
  1366,
  1367,
  1368,
  1369,
  1370,
  1371,
  1372,
  1373,
  1374,
  1375,
  1376,
  1377,
  1378,
  1379,
  1380,
  1381,
  1382,
  1383,
  1384,
  1385,
  1386,
  1387,
  1388,
  1389,
  1390,
  1391,
  1392,
  1393,
  1394,
  1629,
  1630,
  1631,
  1632,
  1633,
  1634,
  1635,
  1636,
  1637,
  1638,
  1639,
  1641,
  1642,
  1643,
  1644,
  1645,
  1646,
  1647,
  1648,
  1649,
  1650,
  1651,
  1652,
  1653,
  1654,
  1655,
  1656,
  1657,
  1659,
  1660,
  1661,
  1662,
  1663,
  1664,
  1665,
  1666,
  1667,
  1668,
  1669,
  1670,
  1671,
  1672,
]

const installPackages = (command, packages) =>
  fs.existsSync(`/usr/bin/${command}`) ||
  executeCommand(['sudo', 'apt', '-y', 'install', ...packages])

const main = () => buildBooks(generateBooks(), generateBook, true)

const processDocument = (document, pages, book) => {
  installPackages('ebook-convert', [
    'calibre',
    ...(process.env.DISPLAY ? [] : ['xvfb']),
  ])
  const ebook = moveFile(document, document.replace(/\.pdf$/, '.epub'))
  executeCommand([
    ...(process.env.DISPLAY ? [] : ['xvfb-run']),
    'ebook-convert',
    ebook,
    document,
    '--base-font-size=14',
    '--custom-size=8.27x20',
    '--line-height=18',
    '--pdf-serif-family=sans-serif',
    '--preserve-cover-aspect-ratio',
  ])
  fs.unlinkSync(ebook)
  const content = tempPath('content.pdf')
  executeCommand([
    'gs',
    '-o',
    content,
    ...ghostscriptOptions,
    `-dFirstPage=${process.env.TRAVIS ? 4 : 5}`,
    `-dLastPage=${parsePDFInfo(document, 'Pages')}`,
    document,
  ])
  installPackages('pdfcrop', ['texlive-extra-utils'])
  const cropped = tempPath('cropped.pdf')
  executeCommand([
    'pdfcrop',
    `--margins=${process.env.TRAVIS ? 22 : 15}`,
    content,
    cropped,
  ])
  const cover = tempPath('cover.pdf')
  const image = downloadFile(book.cover, tempPath('cover.jpg'))
  executeCommand([
    'gs',
    '-o',
    cover,
    ...ghostscriptOptions,
    'viewjpeg.ps',
    '-c',
    `(${image})`,
    `<< /PageSize [${executeCommand([
      'identify',
      '-format',
      '%w %h',
      image,
    ])}] >> setpagedevice viewJPEG showpage`,
  ])
  executeCommand(['gs', '-o', document, ...ghostscriptOptions, cover, cropped])
}

require.main === module && main()
